# -*- coding: utf-8 -*-
"""iso8583_utils.py - ISO8583 Communication Utilities (Production Ready)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TgLp0nPTEJu6ajXt-SkooV04F6FVhTrO
"""

# iso8583_utils.py
import socket
import random
from datetime import datetime
import logging

# --- IMPORTANT: Using 'pyiso8583' for stability ---
from pyiso8583 import ISO8583

logging.basicConfig(level=logging.INFO) # Use INFO for production logging

# --- ISO8583 Field 39 Responses (standard codes) ---
FIELD_39_RESPONSES = {
    "00": "Transaction Approved",
    "05": "Do Not Honor",
    "14": "Terminal unable to resolve encrypted session state. Contact card issuer",
    "54": "Expired Card",
    "82": "Invalid CVV",
    "91": "Issuer Inoperative",
    "92": "Invalid Terminal Protocol",
    "99": "General Error / Server Timeout"
}

# Define the ISO8583 spec (simplified for common fields)
# In a real production system, you MUST use the exact spec provided by your payment processor.
# This is a generic spec and may require adjustments.
ISO_SPEC = {
    "mti": {
        "start": 0,
        "end": 4,
        "type": "n",
        "length": 4
    },
    "fields": {
        2: {"type": "an", "length": "LLVAR"},  # Primary Account Number (PAN)
        3: {"type": "n", "length": 6},         # Processing Code
        4: {"type": "n", "length": 12},        # Amount, Transaction
        7: {"type": "n", "length": 10},        # Transmission Date and Time (MMDDhhmmss)
        11: {"type": "n", "length": 6},        # System Trace Audit Number (STAN)
        14: {"type": "n", "length": 4},        # Expiration Date (YYMM)
        18: {"type": "n", "length": 4},        # Merchant Type
        22: {"type": "n", "length": 3},        # Point of Service Entry Mode
        25: {"type": "n", "length": 2},        # Point of Service Condition Code
        35: {"type": "an", "length": "LLVAR"}, # Track 2 Data
        39: {"type": "an", "length": 2},        # Response Code
        41: {"type": "an", "length": 8},        # Card Acceptor Terminal ID
        49: {"type": "n", "length": 3},        # Currency Code, Transaction
        52: {"type": "an", "length": "LLVAR"}, # Personal ID Number (CVV in this context)
        123: {"type": "an", "length": "LLLVAR"} # Private Data
    }
}


def send_iso8583_transaction_to_external_host(card_data, host, port):
    """
    Constructs an ISO8583 message using pyiso8583, sends it to an external host via socket,
    and unpacks the response.
    In a production environment, this function expects a real ISO8583 gateway
    to be available at the specified host and port. It will NOT simulate responses.
    """
    logging.info(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Preparing ISO8583 message for external host {host}:{port}")

    # Create an ISO8583 message instance with the defined spec
    msg = ISO8583(ISO_SPEC)

    # Set MTI (Message Type Indicator)
    msg.mti = '0200' # Authorization Request

    # Set fields based on card_data
    msg[2] = card_data['pan']
    msg[3] = '000000' # Standard processing code for purchase
    msg[4] = str(int(float(card_data['amount']) * 100)).zfill(12) # Amount in cents
    msg[7] = datetime.now().strftime('%m%d%H%M%S') # Transmission Date and Time
    msg[11] = card_data.get('txn_id', str(random.randint(100000,999999)))[-6:] # STAN
    msg[14] = card_data['expiry'] # Expiration Date (YYMM)
    msg[18] = '5999' # Merchant Type
    msg[22] = '051' # POS Entry Mode (Manual, Keyed)
    msg[25] = '00' # POS Condition Code (Normal)
    msg[35] = f"{card_data['pan']}={card_data['expiry']}{card_data['cvv']}" # Track 2 Data
    msg[41] = 'TERMID01' # Card Acceptor Terminal ID
    msg[49] = card_data.get('currency', '840') # Currency Code Transaction (840 for USD)
    msg[52] = card_data['cvv'] # CVV
    msg[123] = 'LLOYDS QUANTUM POS' # Private Data

    # Pack the message into bytes
    raw_message = msg.pack()
    logging.info(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Sending ISO8583 message (hex): {raw_message.hex()}")

    field39_resp = "99" # Default to unknown error
    resp_obj = ISO8583(ISO_SPEC) # Initialize response object for response parsing

    try:
        # Establish socket connection and send/receive data
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(15) # Set a generous timeout for production network calls
            s.connect((host, port))
            s.sendall(raw_message)
            logging.info(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Waiting for ISO8583 response...")
            resp_raw = s.recv(2048) # Receive response bytes
            resp_obj.unpack(resp_raw) # Unpack the response bytes into the message object
            field39_resp = resp_obj[39] # Get Field 39 (Response Code) from the unpacked message
            logging.info(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Received ISO8583 response. Field 39: {field39_resp}")
            return field39_resp, resp_obj

    except socket.timeout:
        logging.error(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Socket connection/receive timed out to external ISO host {host}:{port}.")
        # In production, a timeout is a critical error. Re-raise.
        raise ConnectionError("Connection to external ISO host timed out.")
    except ConnectionRefusedError:
        logging.error(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Connection to external ISO host refused {host}:{port}. Verify host/port and server status.")
        # In production, a refused connection is a critical error. Re-raise.
        raise ConnectionRefusedError("Connection to external ISO host refused.")
    except Exception as e:
        logging.critical(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] iso8583_utils.py: Critical error during ISO8583 communication: {e}", exc_info=True)
        # Catch any other unexpected errors during communication and re-raise.
        raise